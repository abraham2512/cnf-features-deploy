name: 'ðŸ”§ Gemini Create Fix'

on:
  issue_comment:
    types: [created]

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number }}'
  cancel-in-progress: false

defaults:
  run:
    shell: 'bash'

jobs:
  create-fix:
    runs-on: 'ubuntu-latest'
    if: |
      github.event.issue.state == 'open' &&
      contains(github.event.comment.body, '@gemini-cli create-fix')
    permissions:
      contents: 'write'
      id-token: 'write'
      issues: 'write'
      pull-requests: 'write'
    steps:
      - name: 'Mint identity token'
        id: 'mint_identity_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'
          permission-contents: 'write'
          permission-issues: 'write'
          permission-pull-requests: 'write'

      - name: 'Run Gemini CLI - Create Fix'
        id: 'run_gemini_create_fix'
        timeout-minutes: 10
        uses: 'google-github-actions/run-gemini-cli@v0' # ratchet:exclude
        env:
          TITLE: '${{ github.event.issue.title }}'
          DESCRIPTION: '${{ github.event.issue.body }}'
          EVENT_NAME: '${{ github.event_name }}'
          GITHUB_TOKEN: '${{ steps.mint_identity_token.outputs.token || secrets.GITHUB_TOKEN || github.token }}'
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          REPOSITORY: '${{ github.repository }}'
          COMMENT_BODY: '${{ github.event.comment.body }}'
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          google_api_key: '${{ secrets.GOOGLE_API_KEY }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          gemini_debug: true
          gemini_model: '${{ vars.GEMINI_MODEL }}'
          settings: |-
            {
              "maxSessionTurns": 50,
              "telemetry": {
                "enabled": ${{ vars.GOOGLE_CLOUD_PROJECT != '' }},
                "target": "gcp"
              },
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "GITHUB_PERSONAL_ACCESS_TOKEN",
                    "ghcr.io/github/github-mcp-server"
                  ],
                  "includeTools": [
                    "get_issue_comments",
                    "get_file_contents",
                    "create_branch",
                    "create_or_update_file",
                    "add_issue_comment"
                  ],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
                  }
                }
              }
            }
          prompt: |-
            You are a security engineer implementing CVE fixes for repository ${{ env.REPOSITORY }}.

            TASK: Create a fix branch for issue #${{ env.ISSUE_NUMBER }} based on the auto-triage analysis.

            STEP 1: Read the triage analysis
            Use mcp__github__get_issue_comments with owner "abraham2512" and repo "cnf-features-deploy" and issue_number ${{ env.ISSUE_NUMBER }} to get all comments. Find the most recent comment containing "CVE Analysis" or "Proposed Fix" that has the technical details.

            STEP 2: Extract the fix from the analysis
            From the triage analysis, identify:
            - The specific file to modify (e.g., Containerfile, Dockerfile)
            - The exact change needed (e.g., "RUN chmod 644 /etc/passwd")
            - The location in the file where the change should be applied

            STEP 3: Get the current file content
            Use mcp__github__get_file_contents with owner "abraham2512", repo "cnf-features-deploy", and the path identified in step 2 (likely "ztp/resource-generator/Containerfile").

            STEP 4: Create the fix branch
            Use mcp__github__create_branch with:
            - owner: "abraham2512"
            - repo: "cnf-features-deploy"
            - branch: "cve-fix-issue-${{ env.ISSUE_NUMBER }}"
            - from_branch: "master"

            STEP 5: Apply the fix
            Use mcp__github__create_or_update_file to modify the file with the security fix. Add the fix at the appropriate location (typically before the USER instruction in containers).

            STEP 6: Report success
            Use mcp__github__add_issue_comment to post a comment with:
            - Summary of changes made
            - Branch name created
            - Ready for PR creation

            Execute these steps now to create the fix branch.